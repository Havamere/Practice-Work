var me = {
  firstName : "Kyle",
  lastName : "Rinehart",
  age : 32
};

var myself = [["Kyle", "Rinehart"], "32", "Programmer"];

var andI = "Kyle Rinehart";

function each(object,callback){
  if (typeof object === "string" || typeof object === "array") {
      for (var i = 0; i < object.length; i++) {
          callback(object[i],i);
      }
  } else {
      for (var key in object){
          callback(object[key], key);
      }
  }
}

each(myself, function(key){console.log(key);});

/*
Welcome to the technical portion of this interview! You will be working together with your interviewer to work through the assignments 
in this file. Here are a few important points to keep in mind during the interview:

- Communicate your thinking clearly before and while writing code. You will not be writing any code that you cannot hold conversation about.
- You may not use any external resources outside of this document during the interview. Reference to any outside materials during the interview is considered academic dishonesty and will immediately and irrevocably remove you from consideration for admissions into our program.
- If there is anything you would want to look up online, instead ask your interviewer, and they will support you as is appropriate for the interview setting.

Any questions?
*/

var myArray = [1,2,3,4,5];

var myObject = {
    name: "Kyle Rinehart",
    email: "kyle.rinehart83@gmail.com",
    phone: "407-697-9151"
}

function print(parameter){
    console.log(parameter);
}

print(myArray[1]);

print(myObject["name"]);


// You are going to write an `each` function which takes a collection and an callback function and 
// invokes the callback function on each item in the collection.

// Here are 2 example use cases of `each`. Use these examples as guidance for how an implementation of 
// `each` should behave.

// First of all, `each` should be able to handle arrays:

var scores = [10345, 23432, 333356];

var printScore = function (score) {
  console.log(score);
};

each(scores, printScore);

// The following would be logged to the console:
// 10345
// 23432
// 333356


// Secondly, `each` should also be able to handle objects:

var capitals = {
  California: 'Sacramento',
  Vermont: 'Montpelier',
  Arizona: 'Phoenix'
};

var printCapital = function (capital) {
  console.log(capital);
}

each(capitals, printCapital);

// The following would be logged to the console:
// 'Sacramento'
// 'Montpelier'
// 'Phoenix'

// Write the body of the function below:

var each = function (collection, callback) {
    if (Array.isArray(collection) === true){
        for (var i = 0; i < collection.length; i++){
            callback(collection[i]);
        }
    } else {
        for (key in collection) {
            callback(collection[key]);
    }
};

each(myArray, print);
each(myObject, print);




// Here is an example use case of `map`. Use this example as guidance for how an implementation of 
// `map` should behave.


var allottedMinutes = [15, 20, 32];

var double = function (num) {
  return num * 2;
};

var doubledAllottments = map(allottedMinutes, double);
console.log(doubledAllottments); // logs [30, 40, 64]

/*
Please walk though, line by line, what is happening in the following function.
Be as clear as possible in your descriptions about what is happening in the code.
If you find any bugs:
  - Say what would happen if the bug remained (in other words, why is it a bug?)
  - Say what needs to happen instead.
  - Propose how to go about making that happen.
  - Put your thinking into action and make any changes necessary to make the function work as intended.
*/

var map = function (collection, callback) {
  var result = [];
  each(collection, function (element) {
    result.push(callback(element);
  )};
  return results;
};



// Here are example use cases of `filter` and the closely related function `reject`. 
// Use these examples as guidance for how implementations of `filter` or `reject` should behave.


var diceRolls = [3, 4, 6, 2, 6];

var isSix = function (num) {
  return num === 6;

};

// Filter
var sixes = filter(diceRolls, isSix);
console.log(sixes); // [6, 6];

// Reject
var notSixes = reject(diceRolls, isSix);
console.log(notSixes); // [3, 4, 2];

// Use `reject` with `numberLists` to return only the elements whose own first element is not greater than its last.
// Write any additional functions you might need.

var numberList1 = [4, 2, 3]; // first element is greater than its last
var numberList2 = [0, 8, 2]; // first element is not greater than its last
var numberList3 = [8, 2, 9]; // first element is not greater than its last

var numberLists = [numberList1, numberList2, numberList3];

// Write your code below.

var foo = reject(numberLists, function(element){
     if (element[0] > element[element.length-1]) {
     return true;
     } else {
     return false;
     }
}

console.log(foo);